###############################################################################
#                                                                             #
#     IAR Assembler V7.20.1.7305/W32 for ARM 10/Jun/2014  12:14:09            #
#     Copyright 1999-2014 IAR Systems AB.                                     #
#                                                                             #
#           Source file   =  C:\Users\Rafael Send\Documents\GitHub\FlyWeight\MC1322X-v2.1\PLM\Source\Common\Sys\Init-IAR.S#
#           List file     =  C:\Users\Rafael Send\Documents\GitHub\FlyWeight\MC1322X-v2.1\GW0015-CC\Release\List\Init-IAR.lst#
#           Object file   =  C:\Users\Rafael Send\Documents\GitHub\FlyWeight\MC1322X-v2.1\GW0015-CC\Release\Obj\Init-IAR.o#
#           Command line  =  C:\Users\Rafael Send\Documents\GitHub\FlyWeight\MC1322X-v2.1\PLM\Source\Common\Sys\Init-IAR.S #
#                            -OC:\Users\Rafael Send\Documents\GitHub\FlyWeight\MC1322X-v2.1\GW0015-CC\Release\Obj\ #
#                            -s+ -M<> -w+ -r -DUSE_INTERRUPTS                 #
#                            -DUSE_EXCEPTIONS                                 #
#                            -LC:\Users\Rafael Send\Documents\GitHub\FlyWeight\MC1322X-v2.1\GW0015-CC\Release\List\ #
#                            -t8 --cpu ARM7TDMI-S --fpu None                  #
#                                                                             #
###############################################################################

    1                           ;#############################################
                                ########################
    2                           ;# Authors    : Lasse Langwadt Christensen,
                                 Grig Barbulescu
    3                           ;# Created    : 06/03/01
    4                           ;# Date       : 02/27/07
    5                           ;#############################################
                                ########################
    6                           ;# Description:
    7                           ;#   - Interrupt vectors and C-init
    8                           ;#############################################
                                ########################
    9                           
   10                           F_Bit      EQU   0x40
   11                           I_Bit      EQU   0x80
   12                           
   13                           Mode_Uvc   EQU   0x10  ; // user mode - has
                                 same registers as system mode
   14                           Mode_Fvc   EQU   0x11  ; // FIQ mode
   15                           Mode_Ivc   EQU   0x12  ; // IRQ mode
   16                           Mode_Svc   EQU   0x13  ; // supervisor
                                 mode
   17                           Mode_Avc   EQU   0x17  ; // Abort mode
   18                           Mode_und   EQU   0x1B  ; // undefined instr
                                 mode
   19                           Mode_sys   EQU   0x1F  ; // system mode
   20                           
   21                           __USR_stack_size     EQU  512*4
   22                           __IRQ_stack_size     EQU  256*4
   23                           __FIQ_stack_size     EQU  256*4
   24                           __UND_stack_size     EQU   64*4
   25                           __ABT_stack_size     EQU   64*4
   26                           __SUP_stack_size     EQU   64*4
   27                           
   28                             EXPORT _start_vector_
   29                           
   30                             IMPORT vMain
   31                             IMPORT RP_Vector_Init
   32                             
   33                           #if (__VER__ >= 5020000 )
   34                             IMPORT __iar_data_init2
   35                           #else
   37                           #endif  
   38                           
   39                             IMPORT __rom_data_init
   40                             
   41                             IMPORT Region$$Table$$Base
   42                             IMPORT Region$$Table$$Limit
   43                             IMPORT Region_ROM_Table_ROM_Base
   44                             IMPORT Region_ROM_Table_ROM_Limit
   45                           
   46                             IMPORT  RP_Vector_Thumb_0
   47                             IMPORT  RP_Vector_Thumb_1
   48                             IMPORT  RP_Vector_Thumb_2
   49                             IMPORT  RP_Vector_Thumb_3
   50                             
   51                           #ifndef NO_USE_INTERRUPTS
   52                               IMPORT IrqHandler
   53                               IMPORT FiqHandler
   54                               IMPORT vPortYieldProcessor
   55                           #endif
   56                           
   57                           #ifndef NO_USE_EXCEPTIONS
   58                             ;imported from ItcDriver.c
   59                               IMPORT mExceptionHandlerPrefetchAbort
   60                               IMPORT mExceptionHandlerDataAbort
   61                               IMPORT mExceptionHandlerUndefined
   62                               IMPORT mExceptionHandlerSupervisor
   63                           #endif
   64                           
   65                             SECTION .vect: CODE
   66                           
   67                           ;//--Entry point------------------------------
                                -------------------  
   68                           
   69                               CODE32 
   70                           
   71                           _start_vector_
   72    00000000 ........          B       __start_                      ; //
                                              reset
   73                           
   74                           #ifdef NO_USE_EXCEPTIONS
   79                           #else
   80    00000004 ........          B       __UndefInstructionHndlr_      ; //
                                              undefined instruction
   81                            ;   B       __SupervisorHndlr_            ;
                                 // supervisor
   82    00000008 ........          B       vPortYieldProcessor            ; //
                                             supervisor
   83    0000000C ........          B       __PrefetchAbtHndlr_           ; //
                                              prefetch abort
   84    00000010 ........          B       __DataAbtHndlr_               ; //
                                              data abort
   85                           #endif
   86    00000014 ........          B       __reserved_                   ; //
                                              reserved
   87                           #ifdef NO_USE_INTERRUPTS
   90                           #else
   91    00000018 ........          B       IrqHandler                    ; //
                                             IRQ
   92    0000001C ........          B       FiqHandler                    ; //
                                             FIQ
   93                           #endif
   94                           
   95                             SECTION .text: CODE
   96                           
   97                           __start_
   98    00000000 08119FE5          LDR     r1,=system_stack
   99    00000004 D300A0E3          MOV     r0, #Mode_Svc | F_Bit | I_Bit   ;//
                                             supervisor mode, disable all
                                             interrupts
  100    00000008 00F021E1          MSR     cpsr_c,r0
  101    0000000C 401F81E2          ADD     r1,r1,#__SUP_stack_size
  102    00000010 01D0A0E1          MOV     sp,r1
  103                           
  104    00000014 D200A0E3          MOV     r0, #Mode_Ivc | F_Bit | I_Bit   ;//
                                             IRQ mode, disable all interrupts
  105    00000018 00F021E1          MSR     cpsr_c,r0
  106    0000001C 401E81E2          ADD     r1,r1,#__IRQ_stack_size
  107    00000020 01D0A0E1          MOV     sp,r1
  108                               
  109    00000024 D100A0E3          MOV     r0, #Mode_Fvc | F_Bit | I_Bit   ;//
                                             FIQ mode, disable all interrupts
  110    00000028 00F021E1          MSR     cpsr_c,r0
  111    0000002C 401E81E2          ADD     r1,r1,#__FIQ_stack_size
  112    00000030 01D0A0E1          MOV     sp,r1  
  113                           
  114    00000034 DB00A0E3          MOV     r0, #Mode_und | F_Bit | I_Bit   ;//
                                             UND mode, disable all interrupts
  115    00000038 00F021E1          MSR     cpsr_c,r0
  116    0000003C 401F81E2          ADD     r1,r1,#__UND_stack_size
  117    00000040 01D0A0E1          MOV     sp,r1
  118                           
  119    00000044 D700A0E3          MOV     r0, #Mode_Avc | F_Bit | I_Bit   ;//
                                             ABT mode, disable all interrupts
  120    00000048 00F021E1          MSR     cpsr_c,r0
  121    0000004C 401F81E2          ADD     r1,r1,#__ABT_stack_size
  122    00000050 01D0A0E1          MOV     sp,r1
  123                           
  124    00000054 DF00A0E3          MOV     r0, #Mode_sys | F_Bit | I_Bit   ;//
                                             system mode, disable all
                                             interrupts
  125    00000058 00F021E1          MSR     cpsr_c,r0
  126    0000005C 801E81E2          ADD     r1,r1,#__USR_stack_size
  127    00000060 01D0A0E1          MOV     sp,r1
  128                           
  129                               ;  Start in supervisor mode for the OS
                                 setup
  130    00000064 D300A0E3          MOV     r0, #Mode_Svc | F_Bit | I_Bit   ;//
                                             user mode, disable all interrupts
  131    00000068 00F021E1          MSR     cpsr_c,r0
  132                           
  133                           #if (__VER__ >= 5020000 )
  134    0000006C ........          BL      __iar_data_init2
  135                           #else
  137                           #endif  
  138                           ;    // See if we need to initialize the ROM
                                 variables
  139    00000070 9C009FE5          LDR     r0, =Region_ROM_Table_ROM_Base
  140    00000074 9C309FE5          LDR     r3, =Region_ROM_Table_ROM_Limit
  141    00000078 030050E1          CMP     r0, r3
  142                           ;    // If Region_ROM_Table_ROM_Base and
                                 Region_ROM_Table_ROM_Limit are equal, then the
                                 ROM image is loaded in RAM (simulation)
  143                           ;    // No need to init the ROM variables.
  144    0000007C 0000000A          BEQ     __call_main
  145    00000080 ........          BL      __rom_data_init
  146                           
  147                           __call_main
  148                           ;// the main function was renamed to Main in
                                 order to avoid inclusion of C library code for
                                 supplementary initializations
  149    00000084 ........          BL      RP_Vector_Init
  150    00000088 ........          B       vMain         ; // jump to
                                                           "Main()"
  151                           
  152                           __reserved_
  153    0000008C 0EF0B0E1          MOVS     pc,lr
  154                           
  155                           #ifndef NO_USE_EXCEPTIONS
  156                           
  157                           __UndefInstructionHndlr_
  158    00000090 FF5F2DE9          STMFD    r13!, {r0-r12,r14}
  159    00000094 80009FE5          LDR      r0, =mExceptionHandlerUndefined
  160    00000098 000090E5          LDR      r0,[r0,#0]
  161    0000009C 000050E3          CMP      r0,#0
  162    000000A0 0FE0A011          MOVNE    r14,pc
  163    000000A4 10FF2F11          BXNE     r0
  164    000000A8 FF5FBDE8          LDMFD    r13!, {r0-r12,r14}
  165    000000AC 0EF0B0E1          MOVS     PC, R14
  166                           
  167                           __SupervisorHndlr_
  168    000000B0 FF5F2DE9          STMFD    r13!, {r0-r12,r14}
  169    000000B4 64009FE5          LDR      r0, =mExceptionHandlerSupervisor
  170    000000B8 000090E5          LDR      r0,[r0,#0]
  171    000000BC 000050E3          CMP      r0,#0
  172    000000C0 0FE0A011          MOVNE    r14,pc
  173    000000C4 10FF2F11          BXNE     r0
  174    000000C8 FF5FBDE8          LDMFD    r13!, {r0-r12,r14}
  175    000000CC 0EF0B0E1          MOVS     PC, R14
  176                           
  177                           __PrefetchAbtHndlr_
  178    000000D0 FF5F2DE9          STMFD    r13!,{r0-r12,r14}
  179    000000D4 48009FE5          LDR      r0, =mExceptionHandlerPrefetchAbor
                                             t
  180    000000D8 000090E5          LDR      r0,[r0,#0]
  181    000000DC 000050E3          CMP      r0,#0
  182    000000E0 0FE0A011          MOVNE    r14,pc
  183    000000E4 10FF2F11          BXNE     r0
  184    000000E8 FF5FBDE8          LDMFD    r13!,{r0-r12,r14}
  185    000000EC 04F05EE2          SUBS     PC, r14, #4
  186                           
  187                           __DataAbtHndlr_
  188    000000F0 FF5F2DE9          STMFD    r13!,{r0-r12,r14}
  189    000000F4 2C009FE5          LDR      r0, =mExceptionHandlerDataAbort
  190    000000F8 000090E5          LDR      r0,[r0,#0]
  191    000000FC 000050E3          CMP      r0,#0
  192    00000100 0FE0A011          MOVNE    r14,pc
  193    00000104 10FF2F11          BXNE     r0
  194    00000108 FF5FBDE8          LDMFD    r13!,{r0-r12,r14}
  195    0000010C 04F05EE2          SUBS     PC, r14, #4
  196                           
  197                           #endif
  198                           
  198.1                                  TABLE
  198.2  00000110 ........              Reference on line 98
  198.3  00000114 ........              Reference on line 139
  198.4  00000118 ........              Reference on line 140
  198.5  0000011C ........              Reference on line 159
  198.6  00000120 ........              Reference on line 169
  198.7  00000124 ........              Reference on line 179
  198.8  00000128 ........              Reference on line 189
  199                             SECTION .stack:DATA(2)   ;// stack in
                                 internal RAM
  200                           system_stack
  201                               DS8  __USR_stack_size+__IRQ_stack_size+__F
                                IQ_stack_size+__UND_stack_size+__ABT_stack_size
                                +__SUP_stack_size
  202                           
  203                            ;// force the ROM patching referencing
  204                             REQUIRE RP_Vector_Thumb_0
  205                             REQUIRE RP_Vector_Thumb_1
  206                             REQUIRE RP_Vector_Thumb_2
  207                             REQUIRE RP_Vector_Thumb_3
  208                               END
##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#        Bytes: 5196         #
##############################



